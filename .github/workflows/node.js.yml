# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  NEXT_PUBLIC_API_URL: ${{secrets.NEXT_PUBLIC_API_URL}}
  JWT_SECRET: ${{secrets.JWT_SECRET}}
  NEXT_PUBLIC_MEDIA_URL: ${{secrets.NEXT_PUBLIC_MEDIA_URL}}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        
    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        version: 8
        run_install: false
      
    - name: Get pnpm store directory
      shell: bash
      run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - run: pnpm install
    - run: pnpm run build
    - run: pnpm test --if-present

    - name: Get Public IP
      id: ip
      uses: haythem/public-ip@v1.3
      
    - name: Whitelist IP on Hetzner firewall
      uses: adnanjaw/ip-whitelist-on-hetznerfw@v1
      with:
        hetzner_api_key: ${{ secrets.GH_HETZNER_DEPLOY_TOKEN }}
        ip_address: ${{ steps.ip.outputs.ipv4 }}
        firewall_name: ${{ secrets.GH_HETZNER_FIREWALL_NAME }}
        direction: in
        protocol: tcp
        port: 22
        cleanup: true

    - name: Deploy to Server
      uses: easingthemes/ssh-deploy@main
      with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
